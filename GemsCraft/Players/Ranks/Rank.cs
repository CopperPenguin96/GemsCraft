using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using GemsCraft.AppSystem.Exceptions;
using GemsCraft.AppSystem.Logging;
using GemsCraft.Chat;
using GemsCraft.Utils;
using minecraft.world;

namespace GemsCraft.Players.Ranks
{
    public sealed class Rank: IClassy, IComparable<Rank>
    {
        /// <summary>
        /// Rank color code. Should not be left blank
        /// </summary>
        public string Color { get; set; }

        public string Prefix { get; set; }

        public bool IsHidden = false;

        /// <summary>
        /// Rank's displayed name.
        /// </summary>
        public string Name { get; internal set; }

        /// <summary>
        /// Unique rank ID. Generated by Rank.GenerateID. Assigned once at creation.
        /// </summary>
        public string ID { get; private set; }

        /// <summary>
        /// Set of permissions given to this rank. Use Rank.Can() to access.
        /// </summary>
        public bool[] Permissions { get; private set; }

        /// <summary>
        /// Whether players of this rank are allowed to remove restrictions that affect themselves.
        /// Affects /WMain, /WAccess, /WBuild, /ZAdd, /ZEdit, and /ZRemove
        /// </summary>
        public bool AllowSecurityCircumvention;

        public int CopySlots = 2;
        public int FillLimit = 32;
        public int DrawLimit;

        public int IdleKickTimer;
        public int AntiGriefBlocks;
        public int AntiGriefSeconds;

        public bool ReservedSlot;

        /// <summary>
        /// Rank's relative index on the hierarchy. Index of the top
        /// rank is always 0. Subordinate ranks start at 1.
        /// Higher index = lower rank.
        /// </summary>
        public int Index;

        public Rank NextRankUp { get; internal set; }

        public Rank NextRankDown { get; internal set; }

        public World MainWorld { get; set; }

        #region Constructors

        private Rank()
        {
            Permissions = new bool[Enum.GetValues(typeof(Permission)).Length];
            PermissionLimits = new Rank[Permissions.Length];
            PermissionLimitStrings = new string[Permissions.Length];
            Color = ChatColor.White;
            Prefix = "";
        }

        public Rank(string name, string id): this()
        {
            Name = name ?? throw new ArgumentNullException(nameof(name));
            ID = id ?? throw new ArgumentNullException(nameof(id));
            FullName = Name + "#" + ID;
        }

        public Rank(XElement el): this()
        {
            if (el == null) throw new ArgumentNullException(nameof(el));

            // Name
            XAttribute attr = el.Attribute("name");
            if (attr == null)
            {
                throw new RankDefinitionException(
                    null, "Rank definition with no name was ignored.");
            }
            else if (!IsValidRankName(attr.Value.Trim()))
            {
                throw new RankDefinitionException(
                    Name,
                    "Invalid name specified for rank \"{0}\". " +
                    "Rank names can only contain letters, digits, and underscores. " +
                    "Rank definition was ignored.", Name
                );
            }
            else
            {
                // Duplcate Name check is done in RankManager.AddRank()
                Name = attr.Value.Trim();
            }

            // ID
            attr = el.Attribute("id");
            if (attr == null)
            {
                ID = RankManager.GenerateID();
                Logger.Write($"Rank({Name}): No ID specified; issued a new unique ID: {ID}",
                        LogType.Warning);
            }
            else if (!IsValidID(attr.Value.Trim()))
            {
                ID = RankManager.GenerateID();
                Logger.Write(
                    $"Rank({Name}): Invalid ID specified (must be alphanumeric, and exactly 16 characters long); issued a new unique ID: {ID}",
                    LogType.Warning);
            }
            else
            {
                ID = attr.Value.Trim();
                // duplicate ID check is done in RankManager.AddRank()
            }

            FullName = Name + "#" + ID;

            // Color (optional)
            if ((attr = el.Attribute("color")) != null)
            {
                string color = ChatColor.P
            }
        }
        #endregion
    }
}
